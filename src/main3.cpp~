#include <ros/ros.h>
#include <visualization_msgs/Marker.h>
#include <math.h>
#include <cmath>
#include <sensor_msgs/LaserScan.h>


float gpre_val;
float gtheta = 0;
float gnum_readings;
const float grange = 3; //range of consideration in m
sensor_msgs::LaserScan laserscan;
ros::Publisher marker_pub;

void laserCallback(const sensor_msgs::LaserScan::ConstPtr& msg)
{


  laserscan.angle_increment = msg->angle_increment;
  laserscan.angle_min = msg->angle_min;
  laserscan.angle_max = msg->angle_max;

  
  gnum_readings = 1 + ((laserscan.angle_max - laserscan.angle_min)/laserscan.angle_increment);
  laserscan.ranges.resize(gnum_readings);
   
  for (int i = 0; i < gnum_readings; ++i)
  {
    laserscan.ranges[i] = msg->ranges[i];
  }
  
  
  
  laserscan.ranges[0]=0;

  for (int i = 0; i < gnum_readings; ++i)
  {
    if (laserscan.ranges[i] > grange) laserscan.ranges[i] = 0.0; 
  }
  
  gpre_val = laserscan.ranges[0];
  
  for (int i = 1; i < gnum_readings; ++i)
  {
    if (abs(gpre_val - laserscan.ranges[i]) < 0.01) 
    {
      gpre_val = laserscan.ranges[i];
      laserscan.ranges[i] = 0;
    }
    
    else gpre_val = laserscan.ranges[i];
  }
  
  
  marker_pub.publish(laserscan);

}

int main(int argc, char** argv )
{
  ros::init(argc, argv, "points_and_lines");
  ros::NodeHandle n;
  marker_pub = n.advertise<visualization_msgs::Marker>("visualization_marker", 10);
  ros::Subscriber sublaser = n.subscribe("scan", 100, laserCallback);
  

  ros::Rate r(50);

  while (ros::ok())
  {
 

    visualization_msgs::Marker points;
    points.header.frame_id = "laser";
    points.header.stamp = ros::Time::now();
    points.ns = "points_and_lines";
    points.action = visualization_msgs::Marker::ADD;
    points.pose.orientation.w = 1.0;


    points.id = 0;
    points.type = visualization_msgs::Marker::POINTS;

    points.scale.x = 0.15;
    points.scale.y = 0.15;


    // Points are green
    points.color.g = 1.0f;
    points.color.a = 1.0;




  
    for (int i = 1; i < (int)gnum_readings; ++i)
    {
      geometry_msgs::Point p;
      gtheta = i * laserscan.angle_increment;
      
      p.x = laserscan.ranges[i] * sin(gtheta);
      p.y = -(laserscan.ranges[i] * cos(gtheta));
      p.z = 0;

      points.points.push_back(p);
    }
    
    

    ros::spinOnce();
    r.sleep();

  }
}